@functions {
string RenderRotationRulesDropdown(Guid instanceId, RotationOptions selectedOption)
{
var selectHtml = $"<select class='form-control' name='elements[{instanceId}].RotationRules'>";
foreach (var option in Enum.GetValues(typeof(RotationOptions)).Cast<RotationOptions>())
{
var isSelected = selectedOption == option ? "selected" : "";
selectHtml += $"<option value='{(int)option}' {isSelected}>{option}</option>";
}
selectHtml += "</select>";

System.Diagnostics.Debug.WriteLine($"Dropdown HTML for InstanceId {instanceId}: {selectHtml}");

return selectHtml;
}
}
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using PalletOptimization.Enums
@model IEnumerable<PalletOptimization.Models.Elements>

@{
ViewData["Title"] = "Planner";
}

<h1>Planner</h1>

<div style="display: flex; justify-content: space-between; align-items: flex-start;">
    <!-- Left Side: Elements Table -->
    <div style="width: 60%; margin-right: 20px; border: 1px solid; border-radius:5px; border-color: aqua;">
        @if (Model?.Count() > 0)
        {
        <!-- Form wraps the entire elements table -->
        <form asp-action="SaveAllElements" method="post">
            <table class="table">
                <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Name)</th>
                    <th>@Html.DisplayNameFor(model => model.RotationRules)</th>
                    <th>@Html.DisplayNameFor(model => model.IsSpecial)</th>
                    <th>@Html.DisplayNameFor(model => model.Tag)</th>
                    <th>@Html.DisplayNameFor(model => model.Length) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Width) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Height) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Weight) (Kg)</th>
                    <th>@Html.DisplayNameFor(model => model.HeightWidthFactor)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model)
                {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>

                    <!-- Rotation Rules Dropdown -->
                    <td>
                        @Html.Raw(RenderRotationRulesDropdown(item.InstanceId, item.RotationRules))
                    </td>

                    <!-- IsSpecial Checkbox -->
                    <td>
                        <input type="checkbox" name="elements[@item.InstanceId].IsSpecial" value="true" @(item.IsSpecial ? "checked" : "") />
                        <!-- Hidden field ensures unchecked boxes are sent as false -->
                        <input type="hidden" name="elements[@item.InstanceId].IsSpecial" value="false" />
                    </td>

                    <!-- Elements Tag Field -->
                    <td>
                        <input type="text" class="form-control" name="elements[@item.InstanceId].Tag" value="@item.Tag" style="width: 80px;" />
                    </td>

                    <td>@Html.DisplayFor(modelItem => item.Length)</td>
                    <td>@Html.DisplayFor(modelItem => item.Width)</td>
                    <td>@Html.DisplayFor(modelItem => item.Height)</td>
                    <td>@Html.DisplayFor(modelItem => item.Weight)</td>

                    <!-- HeightWidthFactor Field -->
                    <td>
                        <span>@item.HeightWidthFactor</span>
                    </td>

                    <!-- Hidden input for InstanceId -->
                    <input type="hidden" name="elements[@item.InstanceId].InstanceId" value="@item.InstanceId" />

                </tr>
                }
                </tbody>
            </table>

            <!-- Save All Settings Button -->
            <div style="text-align: right; margin-top: 10px;">
                <button id="save-elements-btn" type="submit" class="btn btn-primary">Save All Element Settings</button>
            </div>
        </form>

        <!-- Generate New Order Button (outside the form) -->
        <div style="text-align: right; margin-top: 10px;">
            <a asp-action="MakeOrder" class="btn btn-secondary">Generate New Order</a>
        </div>
        }
        else
        {
        <p>No order loaded, want to add a random one?</p>
        <div style="margin-top: 10px;">
            <a asp-action="MakeOrder" class="btn btn-primary">Generate Order</a>
        </div>
        }
    </div>

    <!-- Right Side: Pallet Customization Form -->
    <div style="width: 40%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
        <h3 id="CustomizePallet">Pallet Customization</h3>
        <form asp-action="SavePalletSettings" method="post" id="pallet-settings-form">
            <div class="mb-3">
                <label for="MaxHeight" class="form-label">Max Height for Pallet + Element (mm)</label>
                <input name="MaxHeight" type="number" class="form-control" id="MaxHeight" value="@(Pallets.MaxHeight)">
            </div>

            <div class="mb-3">
                <label for="MaxWeight" class="form-label">Max Weight (kg)</label>
                <input name="MaxWeight" type="number" class="form-control" id="MaxWeight" value="@(Pallets.MaxWeight)">
            </div>

            <div class="mb-3">
                <label for="Overhang" class="form-label">Overhang (mm)</label>
                <input name="Overhang" type="number" class="form-control" id="Overhang" value=@(Pallets.MaxOverhang)>
            </div>

            <div class="mb-3">
                <label for="SpaceBetween" class="form-label">Space Between Elements (mm)</label>
                <input name="SpaceBetween" type="number" class="form-control" id="SpaceBetween" value="@(Pallets.SpaceBetweenElements)">
            </div>

            <div class="mb-3">
                <label for="StackingHeight" class="form-label">Allow Stacking Up to (mm)</label>
                <input name="StackingHeight" type="number" class="form-control" id="StackingHeight" value="@(Pallets.StackingMaxHeight)">
            </div>

            <div class="mb-3">
                <label for="StackingWeight" class="form-label">Allow Stacking Up to (kg)</label>
                <input name="StackingWeight" type="number" class="form-control" id="StackingWeight" value="@(Pallets.StackingMaxWeight)">
            </div>

            <div class="mb-3">
                <label for="AddedPlate" class="form-label">Added Plate on Side (mm)</label>
                <input name="AddedPlate" type="number" class="form-control" id="AddedPlate" value="@(Pallets.Endplate)">
            </div>

            <div class="mb-3">
                <label for="MaxPalletSpace" class="form-label">Max Amount of slots on Pallet (slots)</label>
                <input name="MaxPalletSpace" type="number" class="form-control" id="MaxPalletSpace" value="@(Pallets.SlotsOnPallet)">
            </div>

            <button type="submit" class="btn btn-primary">Save Pallet Settings</button>
            <button type="button" id="optimize-btn" class="btn btn-success">Optimize</button>
        </form>
    </div>
</div>

<!-- Toast notification styles (the pop-up) -->
<style>
    .toast {
        visibility: hidden;
        min-width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 5px;
        padding: 16px;
        position: fixed;
        z-index: 9999;
        left: 50%;
        top: 50px;
        transform: translate(-50%, -50%);
        font-size: 17px;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 1s ease-out;
    }

    .toast.show {
        visibility: visible;
        opacity: 1; /* Fade in */
        transition: opacity 1s ease-in-out, visibility 0s;
    }
</style>

<!-- Toast element -->
<div id="toast" class="toast"></div>

@section Scripts {
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        // Save All Elements
        $("#save-elements-btn").click(function (event) {
            event.preventDefault(); // Prevent default form submission

            const formData = $("form").serialize();

            $.ajax({
                url: "@Url.Action("SaveAllElements", "Elements")",
                type: "POST",
                data: formData,
                success: function (response) {
                    console.log("Elements saved successfully:", response);
                    showToast("Elements saved successfully!");
                },
                error: function () {
                    showToast("An error occurred while saving elements.");
                },
            });
        });

        // Save Pallet Settings
        $("#pallet-settings-form").submit(function (event) {
            event.preventDefault(); // Prevent default form submission

            const formData = $(this).serialize(); // Serialize form data

            $.ajax({
                url: "@Url.Action("SavePalletSettings", "Elements")",
                type: "POST",
                data: formData,
                success: function (response) {
                    console.log("Pallet settings saved:", response);
                    showToast("Pallet settings saved successfully!");
                },
                error: function () {
                    showToast("An error occurred while saving pallet settings.");
                },
            });
        });

        // Optimize and Generate JSON
        $("#optimize-btn").click(function () {
            fetch('@Url.Action("OptimizeAndGenerateJson", "Elements")', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            })
                .then((response) => {
                    if (!response.ok) throw new Error("Failed to generate JSON file.");
                    return response.json();
                })
                .then((data) => {
                    const jsonString = JSON.stringify(data, null, 2);
                    const blob = new Blob([jsonString], { type: "application/json" });
                    const url = window.URL.createObjectURL(blob);

                    // Download JSON file
                    const a = document.createElement("a");
                    a.href = url;
                    a.download = "OptimizedPallets.json";
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);

                    // Clean up
                    window.URL.revokeObjectURL(url);

                    showToast("Optimization complete. JSON file downloaded.");
                })
                .catch((error) => {
                    console.error("Error:", error);
                    showToast("An error occurred during optimization.");
                });
        });

        // Show toast notifications
        function showToast(message) {
            console.log("Toast is being triggered"); // Debug log
            const toast = $("#toast");

            toast.removeClass("show");
            setTimeout(function () {
                toast.text(message);
                toast.addClass("show");
            }, 10);

            // Hide toast after 4 seconds
            setTimeout(function () {
                toast.removeClass("show");
            }, 4000);
        }
    });
</script>
}