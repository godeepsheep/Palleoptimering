@functions {
string RenderRotationRulesDropdown(Guid instanceId, RotationOptions selectedOption)
{
var selectHtml = $"<select class='form-control' name='elements[{instanceId}].RotationRules'>";
foreach (var option in Enum.GetValues(typeof(RotationOptions)).Cast<RotationOptions>())
{
var isSelected = selectedOption == option ? "selected" : "";
selectHtml += $"<option value='{(int)option}' {isSelected}>{option}</option>";
}
selectHtml += "</select>";

System.Diagnostics.Debug.WriteLine($"Dropdown HTML for InstanceId {instanceId}: {selectHtml}");

return selectHtml;
}
}
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using PalletOptimization.Enums
@model IEnumerable<PalletOptimization.Models.Elements>

@{
ViewData["Title"] = "Planner";
}

<h1>Planner</h1>

<div style="display: flex; justify-content: space-between; align-items: flex-start;">
    <!-- Left Side: Elements Table -->
    <div style="width: 60%; margin-right: 20px; border: 1px solid; border-radius:5px; border-color: aqua;">
        @if (Model?.Count() > 0)
        {
        <!-- Form wraps the entire elements table -->
        <form asp-action="SaveAllElements" method="post">
            <table class="table">
                <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Name)</th>
                    <th>@Html.DisplayNameFor(model => model.RotationRules)</th>
                    <th>@Html.DisplayNameFor(model => model.IsSpecial)</th>
                    <th>@Html.DisplayNameFor(model => model.Tag)</th>
                    <th>@Html.DisplayNameFor(model => model.Length) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Width) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Height) (mm)</th>
                    <th>@Html.DisplayNameFor(model => model.Weight) (Kg)</th>
                    <th>@Html.DisplayNameFor(model => model.HeightWidthFactor)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model)
                {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>

                    <!-- Rotation Rules Dropdown -->
                    <td>
                        @Html.Raw(RenderRotationRulesDropdown(item.InstanceId, item.RotationRules))
                    </td>

                    <!-- IsSpecial Checkbox -->
                    <td>
                        <input type="checkbox" name="elements[@item.InstanceId].IsSpecial" value="true" @(item.IsSpecial ? "checked" : "") />
                        <!-- Hidden field ensures unchecked boxes are sent as false -->
                        <input type="hidden" name="elements[@item.InstanceId].IsSpecial" value="false" />
                    </td>

                    <!-- Elements Tag Field -->
                    <td>
                        <input type="text" class="form-control" name="elements[@item.InstanceId].Tag" value="@item.Tag" style="width: 80px;" />
                    </td>

                    <td>@Html.DisplayFor(modelItem => item.Length)</td>
                    <td>@Html.DisplayFor(modelItem => item.Width)</td>
                    <td>@Html.DisplayFor(modelItem => item.Height)</td>
                    <td>@Html.DisplayFor(modelItem => item.Weight)</td>

                    <!-- HeightWidthFactor Field -->
                    <td>
                        <span>@item.HeightWidthFactor</span>
                    </td>


                    <!-- Hidden input for InstanceId -->
                    <input type="hidden" name="elements[@item.InstanceId].InstanceId" value="@item.InstanceId" />

                </tr>
                }
                </tbody>
            </table>

            <!-- Save All Settings Button -->
            <div style="text-align: right; margin-top: 10px;">
                <button id="save-elements-btn" type="submit" class="btn btn-primary">Save All Element Settings</button>
            </div>
        </form>

        <!-- Generate New Order Button (outside the form) -->
        <div style="text-align: right; margin-top: 10px;">
            <a asp-action="MakeOrder" class="btn btn-secondary">Generate New Order</a>
        </div>
        }
        else
        {
        <p>No order loaded, want to add a random one?</p>
        <div style="margin-top: 10px;">
            <a asp-action="MakeOrder" class="btn btn-primary">Generate Order</a>
        </div>
        }
    </div>

    <!-- Include JavaScript -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/js/planner.js"></script>

    <!-- Right Side: Pallet Customization Form -->
    <div style="width: 40%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
        <h3 id="CustomizePallet">Pallet Customization</h3>
        <form>
            <div class="mb-3">
                <label for="MaxHeight" class="form-label">Max Height for Pallet + Element (mm)</label>
                <input type="number" class="form-control" id="MaxHeight" placeholder="Enter max height">
            </div>

            <div class="mb-3">
                <label for="MaxWeight" class="form-label">Max Weight (kg)</label>
                <input type="number" class="form-control" id="MaxWeight" placeholder="Enter max weight">
            </div>

            <div class="mb-3">
                <label for="Overhang" class="form-label">Overhang (mm)</label>
                <input type="number" class="form-control" id="Overhang" placeholder="Enter overhang">
            </div>

            <div class="mb-3">
                <label for="SpaceBetween" class="form-label">Space Between Elements (mm)</label>
                <input type="number" class="form-control" id="SpaceBetween" placeholder="Enter space between elements">
            </div>

            <div class="mb-3">
                <label for="StackingHeight" class="form-label">Allow Stacking Up to (mm)</label>
                <input type="number" class="form-control" id="StackingHeight" placeholder="Enter stacking height">
            </div>

            <div class="mb-3">
                <label for="StackingWeight" class="form-label">Allow Stacking Up to (kg)</label>
                <input type="number" class="form-control" id="StackingWeight" placeholder="Enter stacking weight">
            </div>

            <div class="mb-3">
                <label for="AddedPlate" class="form-label">Added Plate on Side (mm)</label>
                <input type="number" class="form-control" id="AddedPlate" placeholder="Enter added plate thickness">
            </div>

            <div class="mb-3">
                <label for="MaxPalletSpace" class="form-label">Max Amount of Space on Pallet (mm²)</label>
                <input type="number" class="form-control" id="MaxPalletSpace" placeholder="Enter max space">
            </div>

            <button type="button" class="btn btn-primary">Save Pallet Settings</button>
        </form>
    </div>
</div>

<!-- Toast notification styles (the pop up)--> 
<style>
    .toast {
        visibility: hidden;
        min-width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 5px;
        padding: 16px;
        position: fixed;
        z-index: 9999;
        left: 50%;
        top: 50px;
        transform: translate(-50%, -50%);
        font-size: 17px;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 1s ease-out;
    }

    .toast.show {
        visibility: visible;
        opacity: 1; /* Fade in */
        transition: opacity 1s ease-in-out, visibility 0s;
    }


</style>

<!-- Toast element -->
<div id="toast" class="toast"></div>


@section Scripts {

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

    $(document).ready(function() {
        // Add an event listener to the form submission
        $("form").submit(function(event) {
            // Loop through each row in the table
            $("tbody tr").each(function() {
                var instanceId = $(this).find("input[name^='elements']").attr("name").match(/elements\[(.*)\]/)[1];  // Regex to extract InstanceId

                // Find the hidden input with InstanceId and ensure it is populated
                $(this).find("input[name$='.InstanceId']").val(instanceId);  // If needed, add to a hidden field
            });
        });
    });

</script>


<script>
    $(document).ready(function() {
        // Attach a click event to the save button
        $("#save-elements-btn").click(function(event) {
            // You can use jQuery to check the hidden input values before submitting
            $("input[type='hidden'][name*='InstanceId']").each(function() {
                console.log("InstanceId: " + $(this).val());
            });


        });
    });
</script>


<script>

    //Show toast notification
    function showToast(message) {
        console.log("Toast is being triggered"); // Debug log
        var toast = $("#toast");


        toast.removeClass("show");
        setTimeout(function() {
            toast.text(message);
            toast.addClass("show");
        }, 10);

        // Hide toast after 4 seconds
        setTimeout(function() {
            toast.removeClass("show");
        }, 4000);
    }


    // Handle the form submission using AJAX
    $("form").submit(function(event) {
        event.preventDefault();  // Prevent form from submitting the traditional way

        var formData = $(this).serialize();  // Serialize form data

        var submitButton = $("button[type='submit']");
        submitButton.prop("disabled", true); // Disable submit button

        $.ajax({
            url: "@Url.Action("SaveAllElements", "Elements")",  // Adjust with your controller/action
            type: "POST",
            data: formData,
            success: function(response) {

                console.log("AJAX success response:", response);

                showToast("Elements saved successfully");

                submitButton.prop("disabled", false);

            },

        });
    });


</script>


}
